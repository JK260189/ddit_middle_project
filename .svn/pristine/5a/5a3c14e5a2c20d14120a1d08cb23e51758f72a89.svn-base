package kr.or.ddit.notice.controller;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;


import kr.or.ddit.notice.service.INoticeService;
import kr.or.ddit.notice.service.NoticeServiceImpl;
import kr.or.ddit.notice.vo.NoticeVO;




@WebServlet("/noticeUpdate.do")
public class NoticeUpdate extends HttpServlet {
	private static final long serialVersionUID = 1L;

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		String noticeVo = request.getParameter("noticeVo");
		
		INoticeService service = NoticeServiceImpl.getInstance();
		//NoticeVO notiVo = service.getNotice(noticeVo);
		//request.setAttribute("noticeVo", notiVo);
		
		RequestDispatcher rd = request.getRequestDispatcher("/basic/notice/noticeUpdate.jsp");
		rd.forward(request, response);
	
	}
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 사용자가 업로드한 파일이 저장될 서버쪽의 폴더 경로 설정
				String uploadPath = "D:/D_other/uploadFiles";

				// 저장될 폴더가 없으면 생성한다.
				File fileUploadDir = new File(uploadPath);
				if (!fileUploadDir.exists()) {
					fileUploadDir.mkdirs();
				}
				
				request.setCharacterEncoding("utf-8");
				String n_title = request.getParameter("n_title");
				String n_writer = request.getParameter("n_writer");
				String n_content = request.getParameter("n_content");;
				
				NoticeVO noticeVo = new NoticeVO();
				noticeVo.setN_title(n_title);
				noticeVo.setN_writer(n_writer);
				noticeVo.setN_content(n_content);
				// 일단 이전 프로필사진으로 셋팅한다.
				
				// form의 file입력 요소의 name값을 이용하여 Part객체 구하기
				Part part = request.getPart("mem_photo");
				
				if(part != null) {
					String photo = extractFileName(part);
					if(!"".equals(photo)) {
						try {
							String savePhoto = UUID.randomUUID().toString();
							part.write(uploadPath + File.separator + savePhoto);
							noticeVo.setN_image(savePhoto); // 수정파일이 있으면 새로운 파일명으로 셋팅
							 
						}catch(IOException e) {
							
						}
					}
						
				}
				
				INoticeService service = NoticeServiceImpl.getInstance();
				
				
				int cnt = service.updateNotice(noticeVo);
				
				response.sendRedirect( request.getContextPath() + "/member/memberList.do" );
			}


			private String extractFileName(Part part) {
				String fileName = ""; 
				String contentDisposition = part.getHeader("Content-Disposition");
				String[] items = contentDisposition.split(";");
				for (String item : items) {
					if (item.trim().startsWith("filename")) {
						fileName = item.substring(item.indexOf("=") + 2, item.length() - 1);
					}
				}
				return fileName;
			}
	}


